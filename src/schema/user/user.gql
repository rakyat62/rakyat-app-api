type Query {
  user(id: String, username: String): User!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  login(input: LoginUserInput!): AuthPayload!
}

type User implements UserType {
  id: ID!
  username: String!
  email: String
  phone: String
  firstName: String
  lastName: String
  organizations: [UserOrganizationWithRole]
}

type UserOrganizationWithRole {
  id: ID!
  name: String
  isGovernment: Boolean
  description: String
  officeAddress: String
  role: UserRole!
}

enum UserRole {
  OWNER
  MEMBER
  ADMIN
}

input CreateUserInput {
  username: String!
  email: String
  phone: String
  firstName: String
  lastName: String
  password: String!
}

interface UserType {
  id: ID!
  username: String
  email: String
  phone: String
  firstName: String
  lastName: String
}

type AuthPayload {
  token: String!
  user: User!
}

input LoginUserInput {
  username: String!
  password: String!
}
